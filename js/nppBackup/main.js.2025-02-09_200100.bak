;(function () {
	
	'use strict';



	var isMobile = {
		Android: function() {
			return navigator.userAgent.match(/Android/i);
		},
			BlackBerry: function() {
			return navigator.userAgent.match(/BlackBerry/i);
		},
			iOS: function() {
			return navigator.userAgent.match(/iPhone|iPad|iPod/i);
		},
			Opera: function() {
			return navigator.userAgent.match(/Opera Mini/i);
		},
			Windows: function() {
			return navigator.userAgent.match(/IEMobile/i);
		},
			any: function() {
			return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());
		}
	};

	var fullHeight = function() {

		if ( !isMobile.any() ) {
			$('.js-fullheight').css('height', $(window).height());
			$(window).resize(function(){
				$('.js-fullheight').css('height', $(window).height());
			});
		}

	};

	// Animations

	var contentWayPoint = function() {
		var i = 0;
		$('.animate-box').waypoint( function( direction ) {

			if( direction === 'down' && !$(this.element).hasClass('animated') ) {
				
				i++;

				$(this.element).addClass('item-animate');
				setTimeout(function(){

					$('body .animate-box.item-animate').each(function(k){
						var el = $(this);
						setTimeout( function () {
							var effect = el.data('animate-effect');
							if ( effect === 'fadeIn') {
								el.addClass('fadeIn animated');
							} else if ( effect === 'fadeInLeft') {
								el.addClass('fadeInLeft animated');
							} else if ( effect === 'fadeInRight') {
								el.addClass('fadeInRight animated');
							} else {
								el.addClass('fadeInUp animated');
							}

							el.removeClass('item-animate');
						},  k * 200, 'easeInOutExpo' );
					});
					
				}, 100);
				
			}

		} , { offset: '85%' } );
	};


	var burgerMenu = function() {

		$('.js-fh5co-nav-toggle').on('click', function(event){
			event.preventDefault();
			var $this = $(this);

			if ($('body').hasClass('offcanvas')) {
				$this.removeClass('active');
				$('body').removeClass('offcanvas');	
			} else {
				$this.addClass('active');
				$('body').addClass('offcanvas');	
			}
		});



	};

	// Click outside of offcanvass
	var mobileMenuOutsideClick = function() {

		$(document).click(function (e) {
	    var container = $("#fh5co-aside, .js-fh5co-nav-toggle");
	    if (!container.is(e.target) && container.has(e.target).length === 0) {

	    	if ( $('body').hasClass('offcanvas') ) {

    			$('body').removeClass('offcanvas');
    			$('.js-fh5co-nav-toggle').removeClass('active');
			
	    	}
	    	
	    }
		});

		$(window).scroll(function(){
			if ( $('body').hasClass('offcanvas') ) {

    			$('body').removeClass('offcanvas');
    			$('.js-fh5co-nav-toggle').removeClass('active');
			
	    	}
		});

	};

	var sliderMain = function() {
		
	  	$('#fh5co-hero .flexslider').flexslider({
			animation: "fade",
			slideshowSpeed: 5000,
			directionNav: true,
			start: function(){
				setTimeout(function(){
					$('.slider-text').removeClass('animated fadeInUp');
					$('.flex-active-slide').find('.slider-text').addClass('animated fadeInUp');
				}, 500);
			},
			before: function(){
				setTimeout(function(){
					$('.slider-text').removeClass('animated fadeInUp');
					$('.flex-active-slide').find('.slider-text').addClass('animated fadeInUp');
				}, 500);
			}

	  	});

	};

	// Document on load.
	$(function(){
		fullHeight();
		contentWayPoint();
		burgerMenu();
		mobileMenuOutsideClick();
		sliderMain();
	});	
	
	
	////////////////////////////////////////////////////////////////////////
	
			
	document.addEventListener('DOMContentLoaded', function() {
  // 검색 폼 및 관련 요소
  const searchForm = document.getElementById('searchForm');
  const searchInput = document.getElementById('searchInput');
  const yearSelect = document.getElementById('yearSelect');

  // Pagination 컨트롤 요소
  const firstPageBtn = document.getElementById('first-page');
  const prevPageBtn = document.getElementById('prev-page');
  const nextPageBtn = document.getElementById('next-page');
  const lastPageBtn = document.getElementById('last-page');
  const pageNumbersDiv = document.getElementById('page-numbers');

  // 모든 논문 그룹 (.journal-item)에서 개별 논문 항목(.journals_box)들을 모두 수집
  const groups = Array.from(document.querySelectorAll('.journal-item'));
  let allItems = [];
  groups.forEach(group => {
    const boxes = Array.from(group.querySelectorAll('.journals_box'));
    allItems = allItems.concat(boxes);
  });

  // 검색된 결과를 저장할 배열 (초기엔 전체 아이템)
  let filteredItems = allItems.slice();
  let currentPage = 1;
  const itemsPerPage = 5;
  let totalPages = Math.ceil(filteredItems.length / itemsPerPage);

  // 필터링 함수: 검색어 및 선택한 년도를 기준으로 전체 아이템을 필터링
  function filterItems() {
    const query = searchInput.value.trim().toLowerCase();
    const selectedYear = yearSelect.value.trim();
    filteredItems = allItems.filter(box => {
      const boxText = box.textContent.toLowerCase();
      // 각 개별 논문 항목의 그룹은 .journal-item; get the closest group's data-year
      const group = box.closest('.journal-item');
      const groupYear = group ? (group.getAttribute('data-year') || "").trim() : "";
      const matchesSearch = (query === '' || boxText.indexOf(query) !== -1);
      const matchesYear = (selectedYear === '' || groupYear === selectedYear);
      return matchesSearch && matchesYear;
    });
    currentPage = 1;
    totalPages = Math.ceil(filteredItems.length / itemsPerPage);
  }

  // 페이지를 표시하는 함수
  function showPage(page) {
    // 결과를 표시할 컨테이너; 기존 #journalsList를 대체할 새로운 컨테이너 id를 'paginatedResults'로 사용
    let paginatedContainer = document.getElementById('paginatedResults');
    if (!paginatedContainer) {
      paginatedContainer = document.createElement('div');
      paginatedContainer.id = 'paginatedResults';
      // 기존의 journalsList 내용을 비우고, paginatedContainer를 추가합니다.
      const journalsList = document.getElementById('journalsList');
      journalsList.innerHTML = "";
      journalsList.appendChild(paginatedContainer);
    } else {
      paginatedContainer.innerHTML = "";
    }

    const startIndex = (page - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const pageItems = filteredItems.slice(startIndex, endIndex);
    pageItems.forEach(item => {
      const wrapper = document.createElement('div');
      wrapper.className = 'journal-result';
      // cloneNode(true)하여 원본 DOM에 영향을 주지 않음
      wrapper.appendChild(item.cloneNode(true));
      paginatedContainer.appendChild(wrapper);
    });
    currentPage = page;
    updatePaginationControls();
  }

  // 페이지네이션 버튼들을 업데이트하는 함수
  function updatePaginationControls() {
    pageNumbersDiv.innerHTML = "";
    for (let i = 1; i <= totalPages; i++) {
      const btn = document.createElement('button');
      btn.textContent = i;
      if (i === currentPage) {
        btn.classList.add('active');
      }
      btn.addEventListener('click', function() {
        showPage(i);
      });
      pageNumbersDiv.appendChild(btn);
    }
  }

	totalPages = Math.ceil(filteredItems.length / itemsPerPage);
	if (totalPages < 1) totalPages = 1;

  // 이벤트 리스너: 검색 폼 제출 시에만 검색 수행 (엔터키나 검색 버튼)
  searchForm.addEventListener('submit', function(e) {
    e.preventDefault(); // 새로고침 방지
    filterItems();
    showPage(1);
  });

  // Pagination navigation 버튼 이벤트
  firstPageBtn.addEventListener('click', function() {
    if (currentPage > 1) {
      showPage(1);
    }
  });
  prevPageBtn.addEventListener('click', function() {
    if (currentPage > 1) {
      showPage(currentPage - 1);
    }
  });
  nextPageBtn.addEventListener('click', function() {
    if (currentPage < totalPages) {
      showPage(currentPage + 1);
    }
  });
  lastPageBtn.addEventListener('click', function() {
    if (currentPage < totalPages) {
      showPage(totalPages);
    }
  });

  // 초기 실행: 아무 검색 없이 전체 아이템(전체 논문 데이터)을 페이지네이션 처리하여 표시
  showPage(1);
});

		



}());